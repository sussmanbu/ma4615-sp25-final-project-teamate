---
title: "Blog 7: Interactive Analysis"
description: |
  Description of datasets found.
author: "TEAMATE"
date: "2025-04-22"
draft: FALSE
---

Key objectives:

- **High-level overview:** Understand the names of the fake resumes and their callback rates. 
- **Interactive deep dive:** Allow users to explore naming patterns and callback rates by race and gender.

```{r}
# Clear workspace
rm(list = ls())
```

### Interactive Dashboard
Below is a self-contained Shiny app chunk that will render directly in your Quarto site using **shinylive**.  

**Instructions:**  
- ðŸ”¹ *Self-contained:* All libraries and data loading happen within this chunk.  
- ðŸ”¹ *Small data:* The RDS file is hosted on GitHub Pages for fast loading.  
- ðŸ”¹ *Embed:* Use `engine="shinylive-r"` and `standalone="true"` so Quarto knows to spin up a live Shiny session.

```{r}
library(shiny)
library(dplyr)
library(readr)
library(wordcloud2)
library(stringdist)


data <- read_rds(
  "https://sussmanbu.github.io/ma4615-sp25-final-project-teamate/dataset_for_shiny/cleaned_data.rds"
)

#-- UI definition -------------------------------------------------------------
ui <- fluidPage(
  titlePanel("Interactive Name Analysis Dashboard"),
  sidebarLayout(
    sidebarPanel(
      h4("Word Cloud Settings"),
      # User selects race and gender to filter names
      selectInput("race_wc",  "Select Race:",   choices = sort(unique(data$race)),   selected = "White"),
      selectInput("gender_wc","Select Gender:", choices = sort(unique(data$gender)), selected = unique(data$gender)[1])
    ),
    mainPanel(
      # Output: word cloud of top 100 first names
      wordcloud2Output("name_wc", width = "100%", height = "600px"),
      br(),
      # Output: table of top callback-rate names
      h4("Top Names by Callback Rate"),
      tableOutput("top_callbacks")
    )
  )
)

#-- Server logic -------------------------------------------------------------
server <- function(input, output, session) {
  # Filter data by selected race & gender
  filtered_wc <- reactive({
    req(input$race_wc, input$gender_wc)
    data %>% filter(race == input$race_wc, gender == input$gender_wc)
  })

  # Render word cloud: most common first names
  output$name_wc <- renderWordcloud2({
    filtered_wc() %>%
      count(firstname) %>%
      arrange(desc(n)) %>%
      head(100) %>%
      wordcloud2(size = 1)
  })

  # Render table: names ranked by callback rate
  output$top_callbacks <- renderTable({
    filtered_wc() %>%
      group_by(firstname) %>%
      summarise(
        callback_rate = mean(cb, na.rm = TRUE),
        count = n(),
        .groups = 'drop'
      ) %>%
      arrange(desc(callback_rate), desc(count)) %>%
      head(10)
  }, rownames = FALSE)
}

# Launch Shiny app -----------------------------------------------------------
shinyApp(ui, server)
```

---  

**Deployment tips:**  
1. Confirm this chunk runs locally as a standard R chunk.  
2. Place the RDS file in your `scripts/` folder and push to GitHub.  
3. Update the `read_rds()` URL to point to your published `scripts/` location.  
4. Change the chunk engine to `shinylive-r` and re-render the site.  
5. Adjust `viewerHeight` as needed to fit your page layout.  

This interactive component complements the static analysis by letting readers examine names and callback patterns directly by subgroup.  

