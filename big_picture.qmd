---
title: "Big Picture"
description: "A 538/Upshot style article about the data."
toc: true
draft: FALSE
filters:
  - shinylive
editor: 
  markdown: 
    wrap: sentence
---



>How much does your identity matter in landing an interview?

Media coverage of this study by Kline, Rose, and Walters, 2022:\
[New York Times](https://www.nytimes.com/2021/07/29/business/economy/hiring-racial-discrimination.html) \
[Marketplace](https://www.marketplace.org/episode/2021/08/03/research-spotlights-existence-of-racial-discrimination-in-hiring-process) \
[Here & Now](https://www.wbur.org/hereandnow/2021/08/18/name-discrimination-jobs) \
[Youtube Channel: econimate](https://www.youtube.com/watch?v=fLgWIyx0gDw) \


------------------------------------------------------------------------

This comes from the file `big_picture.qmd`.

In today’s competitive job market, a candidate’s name can be an unexpected gatekeeper.
Resumes bearing names commonly associated with different racial or gender groups may receive different callback rates—even when qualifications are identical.
That’s the hidden bias we set out to uncover.

![](images/Sacred-Journey-MichaelReeder.png) \> Note: *Sacred Journey* by Michael Reeder: An Art Piece that represents the journey of self-discovery and identity.

**Thesis:**\
[Taste-based Discrimination](https://en.wikipedia.org/wiki/Taste-based_discrimination) in initial resume screening manifests in callback rates that vary systematically by race and gender of first names.
By analyzing hundreds of thousands of fictitious job applications in a randomized experiment, we can both quantify these disparities and let readers explore them interactively.

### Why this matters

-   **Fairness in hiring:** Early-stage screening should focus on qualifications, not perceived identity.\
-   **Data-driven insight:** Large-scale resume studies provide rigorous evidence, moving the conversation beyond anecdotes.\
-   **Actionable takeaways:** Organizations can monitor name-based disparities and design blind screening to reduce bias.

### What we did on this page

-   **Descriptive analysis:** Static charts show the overall spread of callback rates by race and gender groups.\
-   **Interactive deep dive:** This page embeds a small Shiny dashboard, letting you explore the most common first names by subgroup and see which names yield higher callback rates.

------------------------------------------------------------------------

### Explore it yourself

The interactive below lets you select any racial group and gender to view:

-   A **word cloud** of the top first names in that subgroup.\
-   A **table** of the top names ranked by callback rate.

```{shinylive-r}
#| eval: true
#| standalone: true
#| viewerHeight: 640
# ```{shinylive-r} when ready to publish
library(shiny)
library(dplyr)
library(readr)
library(wordcloud2)
library(stringdist)

options("readr.edition" = 1) # keep this to ensure you can download the data
data <- read_rds("https://sussmanbu.github.io/ma4615-sp25-final-project-teamate/dataset_for_shiny/cleaned_data.rds")


# Define UI for app
ui <- fluidPage(
  titlePanel("Interactive Name Analysis Dashboard"),
  sidebarLayout(
    sidebarPanel(
      h4("Word Cloud Settings"),
      selectInput("race_wc", "Select Race:", choices = sort(unique(data$race)), selected = "White"),
      selectInput("gender_wc", "Select Gender:", choices = sort(unique(data$gender)), selected = unique(data$gender)[1])
    ),
    mainPanel(
      wordcloud2Output("name_wc", width = "100%", height = "600px"),
      br(),
      h4("Top Names by Callback Rate"),
      tableOutput("top_callbacks")
    )
  )
)

# Define server logic required to draw --
server <- function(input, output, session) {
  filtered_wc <- reactive({
    req(input$race_wc, input$gender_wc)
    data %>% filter(race == input$race_wc, gender == input$gender_wc)
  })

  
  output$name_wc <- renderWordcloud2({
    df <- filtered_wc() %>%
      count(firstname) %>%
      arrange(desc(n)) %>%
      head(100)
    wordcloud2(df, size = 1)
  })


  output$top_callbacks <- renderTable({
    df <- filtered_wc() %>%
      group_by(firstname) %>%
      summarise(
        callback_rate = mean(cb, na.rm = TRUE),
        count = n()
      ) %>%
      arrange(desc(callback_rate), desc(count)) %>%
      head(10)
    df
  }, rownames = FALSE)
}

# Create Shiny app ----
shinyApp(ui = ui, server = server)
```

To get the shinylive-r working.

1.  Make sure your shiny app works as a regular r chunk.
2.  Make sure that the chunk is completely self-contained. Meaning all packages and data are loaded inside that chunk. It can't rely on any other chunks.
3.  For the data that you are using for shiny, copy the rds file or any other files into the scripts folder, and then publish your website.
4.  Where you load in your data, change it to use a URL to the data set which will now be on your website. Something like read_rds("https://sussmanbu.github.io/ma-4615-fa24-final-project-group-a/scripts/dataset_for_shiny.rds")
5.  Check that the chunk still works as a regular r chunk.
6.  Change it to a shinylive-r chunk.
7.  Commit and publish your work.

I recommend keeping the data used for the shiny interactive relatively small, though this isn't completely necessary.

------------------------------------------------------------------------

## Rubric: On this page

-   Title
    -   Your big picture page should have a creative/click-bait-y title/headline that provides a hint about your thesis.
-   Clarity of Explanation
    -   You should have a clear thesis/goal for this page. What are you trying to show? Make sure that you explain your analysis in detail but don't go into top much mathematics or statistics. The audience for this page is the general public (to the extent possible). Your thesis should be a statement, not a question.
    -   Each figure should be very polished and also not too complicated. There should be a clear interpretation of the figure so the figure has a clear purpose. Even something like a histogram can be difficult to interpret for non-experts.
-   Creativity
    -   Do your best to make things interesting. Think of a how a news article or a magazine story might draw you in. Think of how each part of your analysis supports the previous part or provides a different perspective.
-   Interactive component
    -   Quality and ease of use of the interactive components. Is it clear what can be explored using your interactive components? Does it enhance and reinforce your conclusions?
-   This page should be self-contained.

**Note**: This page should have no code visible, i.e. use `#| echo: FALSE`.

## Rubric: Other components

### Video Recording

Make a video recording (probably using Zoom) demonstrating your interactive components.
You should provide a quick explanation of your data and demonstrate some of the conclusions from your EDA.
This video should be no longer than 4 minutes.
Include a link to your video (and password if needed) in your README.md file on your Github repository.
You are not required to provide a link on the website.
This can be presented by any subset of the team members.

### Rest of the Site

Finally, here are important things to keep in mind for the rest of the site.

The main title of your page is informative.
Each post has an author/description/informative title.
All lab required posts are present.
Each page (including the home page) has a nice featured image associated with it.
Your about page is up to date and clean.
You have removed the generic posts from the initial site template.
